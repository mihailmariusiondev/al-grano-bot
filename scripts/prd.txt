<context>
# Overview
Al-Grano Bot ayuda a los administradores de grupos y usuarios en chats privados a personalizar c√≥mo el bot genera res√∫menes de conversaci√≥n en Telegram. En vez de depender de m√∫ltiples comandos sueltos (como `/toggle_summary_type` o `/toggle_daily_summary`), este PRD unifica todas las opciones‚Äîtono, longitud, idioma, inclusi√≥n de nombres y horario de resumen diario‚Äîen un √∫nico flujo de configuraci√≥n (`/configurar_resumen`).
- **Problema que resuelve**: Actualmente, los bots de resumen ofrecen toggles fragmentados o ajustes limitados. Esto obliga a los administradores a memorizar varios comandos y carece de una experiencia centralizada.
- **Qui√©n lo usa**:
  - **Administradores de grupo** que quieren controlar el estilo y momento de los res√∫menes autom√°ticos.
  - **Usuarios en chat privado** que desean adaptar el comportamiento de res√∫menes para sus propias conversaciones con el bot.
- **Valor**:
  - Centraliza todas las opciones de personalizaci√≥n en un solo punto (mejorando la usabilidad).
  - Permite a cada chat tener su propio ‚Äúperfil‚Äù de res√∫menes (tono, idioma, nivel de detalle), aumentando la relevancia y coherencia de los res√∫menes generados.
  - Facilita la programaci√≥n de res√∫menes diarios a la hora que convenga al grupo, sin necesidad de comandos dispares.

# Core Features

1. **Men√∫ √önico de Configuraci√≥n (`/configurar_resumen`)**

   * **Qu√© hace**: Muestra el estado actual de cinco par√°metros (`tono`, `longitud`, `idioma`, `incluir nombres`, `hora de resumen diario`) y permite cambiar cada uno v√≠a botones inline.
   * **Por qu√© es importante**: Reemplaza dos comandos independientes (`/toggle_summary_type` y `/toggle_daily_summary`) con un √∫nico punto de entrada, reduciendo confusi√≥n y pasos.
   * **C√≥mo funciona (alto nivel)**:

     1. Al invocar `/configurar_resumen`, el bot lee o crea en BD la fila `chat_summary_config(chat_id, tone, length, language, include_names, daily_summary_hour)`.
     2. Env√≠a un mensaje con las etiquetas actuales y cinco botones inline (Tono, Longitud, Idioma, Nombres, Hora).
     3. Cada bot√≥n edita ese mensaje para desplegar un submen√∫ de opciones concretas; al seleccionar, se actualiza BD y se responde con un peque√±o ‚Äútoast‚Äù (answerCallbackQuery), luego se regresa al men√∫ principal.

2. **Submen√∫s Inline para Cada Par√°metro**

   * **Qu√© hace**: Cada par√°metro (p. ej., ‚ÄúTono‚Äù) abre un submen√∫ con sus posibles valores (`neutral`, `informal`, `sarcastic`, `ironic`, `absurd`).
   * **Por qu√© es importante**: Permite escoger r√°pidamente cada opci√≥n sin escribir comandos de texto.
   * **C√≥mo funciona (alto nivel)**:

     1. Pulsar ‚Äúüß† Tono‚Äù env√≠a un callback `cfg|tone|open`.
     2. El bot valida permisos (solo admins en grupos, o usuario en privado), edita el mensaje a la vista de opciones de tono con botones que env√≠an `cfg|tone|<valor>`.
     3. Al elegir un valor, BD se actualiza y el bot responde `answerCallbackQuery("‚úÖ Tono actualizado a: Sarc√°stico üòà")`, luego edita el mensaje principal para reflejar el nuevo ‚ÄúTono‚Äù.

3. **Generaci√≥n Din√°mica de Prompt para Res√∫menes de Chat (sin Reply)**

   * **Qu√© hace**: Cuando el usuario ejecuta `/summarize` sin responder a un mensaje, el bot arma un ‚Äúsystem prompt‚Äù parametrizado con el `tone`, `length`, `language`, y `include_names` obtenidos de `chat_summary_config`.
   * **Por qu√© es importante**: Convierte a OpenAI en un LLM que produce res√∫menes ajustados al estilo deseado por cada comunidad o usuario.
   * **C√≥mo funciona (alto nivel)**:

     1. Leer `chat_summary_config` y pasar esos cuatro par√°metros a la funci√≥n `get_summary_prompt(...)`, la cual devuelve un string en el idioma correcto y con instrucciones claras (‚ÄúResume con tono sarc√°stico‚Ä¶ longitud media‚Ä¶ menciona participantes‚Ä¶‚Äù).
     2. Recuperar hasta 300 mensajes recientes, formatearlos y enviarlos a `openai_service.chat_completion_openrouter` junto con el prompt generado.
     3. Enviar el resultado al chat usando `send_long_message`.

4. **Scheduler Din√°mico para Resumen Diario**

   * **Qu√© hace**: Programa (o cancela) un job en APScheduler por chat, seg√∫n el campo `daily_summary_hour` (`00`,`03`,`08`,`12`,`18`,`21` o `off`).
   * **Por qu√© es importante**: Los grupos pueden recibir un resumen diario de su actividad a la hora m√°s conveniente, sin tener que ejecutar manualmente `/summarize`.
   * **C√≥mo funciona (alto nivel)**:

     1. Al iniciar el bot, se cargan todas las filas de `chat_summary_config` con `daily_summary_hour ‚â† 'off'` y se crea un job `(id="daily_summary_<chat_id>")` que ejecuta `send_daily_summary_for(chat_id)` cada d√≠a a la hora especificada (zona CET/CEST).
     2. Si un admin cambia su `daily_summary_hour` en el submen√∫, el callback reprograma o elimina ese job en caliente (usando `replace_existing=True` o `remove_job`).

5. **Eliminaci√≥n de Comandos y L√≥gica Obsoletos**

   * **Qu√© hace**: Remueve `/toggle_summary_type` y `/toggle_daily_summary` (archivos y referencias) de la base de c√≥digo y del mensaje de ayuda.
   * **Por qu√© es importante**: Evita confusi√≥n, reduce mantenimiento de c√≥digo duplicado y consolida la configuraci√≥n en un solo flujo.
   * **C√≥mo funciona (alto nivel)**:

     1. Borrar los archivos `toggle_summary_type_command.py` y `toggle_daily_summary_command.py`.
     2. Quitar sus importaciones en `bot/commands/__init__.py` y su registro en `bot/bot.py`.
     3. Actualizar el texto de `/help` para que solo liste los comandos v√°lidos: `/start`, `/summarize`, `/help`, `/configurar_resumen`.

# User Experience

### User Personas

1. **Administrador de Grupo**

   * Perfil: Crea y modera un grupo de Telegram; desea resumir la actividad grupal de manera regular y con un estilo espec√≠fico (m√°s formal, m√°s ir√≥nico, etc.).
   * Objetivo: Configurar el bot para que se adapte al tono de su comunidad y/o reciba un resumen diario a la hora √≥ptima.

2. **Usuario Privado (Chat 1:1 con el Bot)**

   * Perfil: Un usuario que habla en privado con el bot y quiere res√∫menes de sus propias notas o conversaciones.
   * Objetivo: Personalizar el comportamiento del bot para su propio caso de uso (p. ej., res√∫menes en ingl√©s y sin incluir nombres).

3. **Usuario No Administrador en Grupo**

   * Perfil: Miembro normal de un grupo donde el bot ya est√° configurado; desea usar `/summarize` pero no cambiar configuraciones.
   * Objetivo: Obtener res√∫menes sin preocuparse por la configuraci√≥n, ya que la decide el admin.

### Key User Flows

1. **Inicializaci√≥n en Chat Nuevo**

   * El bot üÜï es agregado a un grupo o es ‚ÄúIniciado‚Äù en di√°logo privado.
   * El primer `/summarize` dispara la creaci√≥n de `chat_summary_config` con valores por defecto y genera un resumen neutral, medio, en espa√±ol, que incluye nombres.

2. **Configuraci√≥n Paso a Paso**

   * Admin (o usuario privado) escribe `/configurar_resumen`.
   * Bot muestra el men√∫ principal con los cinco par√°metros y botones inline.
   * Admin pulsa ‚Äúüß† Tono‚Äù ‚Üí edita a submen√∫ de tonos ‚Üí pulsa ‚ÄúSarc√°stico‚Äù ‚Üí BD se actualiza, toast ‚Äú‚úÖ Tono actualizado a: Sarc√°stico üòà‚Äù ‚Üí vuelve al men√∫ principal con ‚ÄúTono: Sarc√°stico üòà‚Äù reflejado.
   * Admin pulsa ‚Äú‚è∞ Hora‚Äù ‚Üí edita a submen√∫ de horas ‚Üí elige ‚Äú08:00‚Äù ‚Üí BD se actualiza, job diario reprogramado a las 08:00 CET/CEST ‚Üí toast ‚Äú‚úÖ Resumen diario programado a las 08:00‚Äù ‚Üí vuelve al men√∫ principal con ‚ÄúResumen diario: 08:00 AM ‚è∞‚Äù.

3. **Uso de `/summarize` (Sin Reply)**

   * Cualquier usuario ejecuta `/summarize` sin reply.
   * Bot obtiene configuraciones: (p. ej.) tono=sarcastic, length=medium, language=es, include\_names=true.
   * Genera prompt: ‚ÄúEres un asistente que resume con tono sarc√°stico, longitud media, en espa√±ol, incluyendo nombres‚Ä¶‚Äù.
   * Recopila √∫ltimos mensajes, los formatea y env√≠a a OpenAI.
   * Bot devuelve el resumen en ese estilo, dividido en chunks si es muy largo.

4. **Uso de `/summarize` (Con Reply a Contenido Espec√≠fico)**

   * Usuario responde a un mensaje (texto/YouTube/art√≠culo/audio/video/documento) con `/summarize`.
   * Bot detecta tipo, usa el handler apropiado y los prompts fijos (por ejemplo, `youtube_template` si ven√≠a enlace de YouTube).
   * El resultado no se ve afectado por la configuraci√≥n de `chat_summary_config`.

### UI/UX Considerations

* **Inline Keyboard Limpio y Consistente**:

  * Men√∫ principal en dos filas (3 botones arriba, 2 abajo).
  * Submen√∫s con botones agrupados l√≥gicamente (ej. tonos en filas de 3+2).
* **Edici√≥n de Mensajes en Lugar de Enviar Nuevos**:

  * Cada pulsaci√≥n solo edita el mensaje original, manteniendo el hilo limpio y evitando spam.
* **Feedback Inmediato**:

  * Cada selecci√≥n dispara un `answerCallbackQuery` con un texto breve (‚Äú‚úÖ ‚Ä¶ actualizado a ‚Ä¶‚Äù).
  * Mensajes de error o permisos insuficientes se muestran como alertas de callback, sin interrumpir el men√∫.
* **Localizaci√≥n Din√°mica**:

  * Toda la UI (t√≠tulos, botones, confirmaciones) adap¬≠tada al idioma actual seleccionado.
  * Si el idioma no est√° implementado, se indica con un toast ‚ÄúEste idioma todav√≠a no est√° disponible‚Äù en el idioma original.
* **Consistencia Visual**:

  * Uso de emojis para reforzar visualmente cada opci√≥n (üòà para sarc√°stico, üìè para medio, üá™üá∏ para espa√±ol, üßç para incluir nombres, ‚è∞ para hora).
  * Texto claro y directo, manteniendo el tono irreverente de Al-Grano Bot, pero evitando expresiones vulgares en men√∫s.

</context>

<PRD>
# Technical Architecture
## 1. Componentes del Sistema
1. **Telegram Bot (bot/bot.py)**
   - Se basa en `python-telegram-bot` (ApplicationBuilder).
   - Registra tres ‚Äúentry points‚Äù principales:
     1. Comando `/configurar_resumen` ‚Üí `configure_summary_command`
     2. Callbacks ‚Äúcfg|‚Ä¶‚Äù ‚Üí `configure_summary_callback`
     3. Comando `/summarize` ‚Üí `summarize_command` (ajustado para leer configuraci√≥n).
   - Integra un `post_shutdown` handler que detiene el scheduler y cierra la DB.

2. **Servicio de Base de Datos (bot/services/database\_service.py)**

   * Usando `aiosqlite` para operaciones as√≠ncronas.
   * Tablas importantes:

     * **`telegram_user`**, **`telegram_chat_state`**, **`telegram_message`** (existentes).
     * **`chat_summary_config`** (nueva).
   * M√©todos relevantes: `get_chat_summary_config`, `update_chat_summary_config`, `get_recent_messages`, `get_or_create_user`, etc.

3. **Servicio de Scheduler (bot/services/scheduler\_service.py)**

   * Usa `APScheduler` (AsyncIOScheduler + CronTrigger).
   * Al iniciar, lee todas las filas de `chat_summary_config` con `daily_summary_hour <> 'off'` y crea un job por chat con id `daily_summary_<chat_id>`.
   * Expone m√©todos para reprogramar o eliminar jobs en caliente cuando se actualiza `daily_summary_hour`.
   * Mantiene el job de env√≠o llamando a `daily_summary_service.send_daily_summary_for(chat_id)`.

4. **Servicio de Res√∫menes/IA (bot/services/openai\_service.py)**

   * Dos clientes `AsyncOpenAI`:

     1. **`openrouter_client`**: Para llamadas de chat completions (modelo principal y fallback).
     2. **`openai_client`**: Para transcripciones de audio (Whisper).
   * M√©todo clave: `get_summary(content, summary_type, language)` ‚Üí arma un sistema de mensajes usando `ALL_SUMMARY_PROMPTS[summary_type]`.
   * M√©todo adicional: `summarize_large_document(text)` ‚Üí divide en chunks seg√∫n `MAX_INPUT_CHARS_PRIMARY_MODEL`, procesa en paralelo, luego concatena y re-sintetiza el resumen final.

5. **Servicio de Mensajer√≠a (bot/services/message\_service.py)**

   * Wrap alrededor de `bot.send_message` para simplificar llamadas desde otros servicios (e.g., scheduler).

6. **Handlers Existentes (bot/handlers/...)**

   * Manejadores para contenido avanzado (audio, video, art√≠culos, documentos).
   * No se modifican en esta fase, salvo que `/summarize` con reply salte directamente a ellos sin leer configuraci√≥n.

7. **M√≥dulo de Prompts**

   * **`bot/prompts/custom_chat_prompts.py`** (nuevo): Funci√≥n `get_summary_prompt(tone, length, language, include_names)`.
   * Los prompts fijos para multimedia y textual (en `bot/prompts/*_prompts.py`) se mantienen para `/summarize` con reply.

8. **Constantes y Etiquetas (bot/utils/constants.py)**

   * A√±adir diccionario `LABELS` con todas las cadenas (t√≠tulos, botones, mensajes de confirmaci√≥n) en varios idiomas (`es`, `en`, `fr`, `pt`).
   * Definir tambi√©n emojis y etiquetas asociadas a cada valor (`tone`, `length`, etc.).

## 2. Data Models

### 2.1. Tabla `chat_summary_config`

```sql
CREATE TABLE IF NOT EXISTS chat_summary_config (
  chat_id             INTEGER PRIMARY KEY,
  tone                TEXT    NOT NULL DEFAULT 'neutral',
  length              TEXT    NOT NULL DEFAULT 'medium',
  language            TEXT    NOT NULL DEFAULT 'es',
  include_names       BOOLEAN NOT NULL DEFAULT 1,
  daily_summary_hour  TEXT    NOT NULL DEFAULT 'off'
);
```

* **Campos**:

  * `chat_id`: PK, hace referencia al grupo o chat privado.
  * `tone`: `'neutral' | 'informal' | 'sarcastic' | 'ironic' | 'absurd'`.
  * `length`: `'short' | 'medium' | 'long'`.
  * `language`: `'es' | 'en' | 'fr' | 'pt'`.
  * `include_names`: `1` (true) o `0` (false).
  * `daily_summary_hour`: `'00','03','08','12','18','21','off'`.

### 2.2. Migraci√≥n de Datos Antiguos (Opcional)

* Si existen columnas en `telegram_chat_state` (`summary_type`, `daily_summary_enabled`), copiarlas a `chat_summary_config` antes de eliminar:

  ```sql
  INSERT INTO chat_summary_config(chat_id, tone, length, language, include_names, daily_summary_hour)
  SELECT chat_id,
         'neutral',
         CASE summary_type WHEN 'short' THEN 'short' ELSE 'long' END,
         'es', 1,
         CASE WHEN daily_summary_enabled = 1 THEN '03' ELSE 'off' END
  FROM telegram_chat_state
  WHERE summary_type IS NOT NULL OR daily_summary_enabled IS NOT NULL;
  ```

### 2.3. Otras Tablas (sin cambios)

* **`telegram_user`**: Usuarios con campos de l√≠mites (`last_text_simple_op_time`, etc.).
* **`telegram_chat_state`**: Estado general del chat (`is_bot_started`, etc.).
* **`telegram_message`**: Mensajes guardados para res√∫menes de chat.

## 3. APIs e Integraciones

1. **Telegram API**

   * Bot recibe comandos y callbacks via `python-telegram-bot`.
   * Usa `InlineKeyboardMarkup` y `answerCallbackQuery` para interacci√≥n en l√≠nea.

2. **OpenAI / OpenRouter API**

   * Res√∫menes de chat sin reply: env√≠a `system prompt` + `user content` a OpenRouter (`client.chat.completions.create`) usando modelo principal o fallback.
   * Transcripciones (Whisper): `client.audio.transcriptions.create(model="whisper-1", file=<audio>)`.

3. **APScheduler**

   * M√≥dulo interno para mantener jobs de resumen diario.
   * CronTrigger con timezone `"Europe/Madrid"`.

## 4. Infraestructura Requerida

* **Servidor de Bot**

  * Entorno Python 3.12+ (con `python-telegram-bot`, `aiosqlite`, `openai`, `APScheduler`, `pytz`).
  * Conexi√≥n estable a Internet para llamadas a OpenRouter y Telegram.
* **SQLite local**

  * Archivo `bot.db` (o ruta configurable) para persistir usuarios, mensajes y `chat_summary_config`.
* **FFmpeg instalado** (para handlers de audio/video, pero no afecta a la configuraci√≥n).
* **Variables de entorno**:

  * `BOT_TOKEN`
  * `OPENROUTER_API_KEY`
  * `OPENAI_API_KEY_FOR_WHISPER`
  * `DB_PATH` (opcional)
  * `DEBUG_MODE`, `LOG_LEVEL`, etc.

---

# Development Roadmap

> **Nota**: A continuaci√≥n se describen las fases de desarrollo, priorizando dependencias l√≥gicas sobre calendarios. Cada fase constituye un ‚Äúbloque‚Äù que puede dividirse en tickets m√°s granularmente.

## Fase 1: Persistencia de Configuraci√≥n y Migraci√≥n

* **Objetivo**: Estructurar la base de datos para alojar la configuraci√≥n de res√∫menes por chat, m√°s la posible migraci√≥n de datos hist√≥ricos.
* **Tareas**:

  1. **Crear Migraci√≥n de BD**

     * A√±adir sentencia SQL para

       * Crear tabla `chat_summary_config` con columnas y valores por defecto.
       * (Opcional) Migrar datos de `telegram_chat_state(summary_type, daily_summary_enabled)` a `chat_summary_config`.
  2. **Actualizar `database_service.py`**

     * Agregar m√©todo `get_chat_summary_config(chat_id)` (que inserta la fila con valores por defecto si no existe).
     * Agregar m√©todo `update_chat_summary_config(chat_id, changes)`.
     * Probar unitariamente lectura/escritura de `chat_summary_config`.
  3. **Actualizar Diagramas de Datos / Documentaci√≥n**

     * A√±adir secci√≥n a la documentaci√≥n interna con la definici√≥n de `chat_summary_config`.
     * Documentar valores permitidos para cada campo.

## Fase 2: Comando `/configurar_resumen` y Submen√∫s

* **Objetivo**: Implementar el flujo completo de configuraci√≥n en l√≠nea, con men√∫s inline y callbacks, sin yet integrar scheduler ni l√≥gica de resumen.
* **Tareas**:

  1. **Definir Constantes de Etiquetas (LABELS)**

     * En `bot/utils/constants.py`, a√±adir el diccionario `LABELS`, con traducciones en `es` y `en` m√≠nimamente.
     * Incluir todos los textos de t√≠tulos, botones y confirmaciones.
  2. **Implementar `configure_summary_command`**

     * Registrar el comando en `bot/bot.py`.
     * Al ejecutarse, invocar `get_chat_summary_config`, generar el mensaje principal y enviar con `InlineKeyboardMarkup`.
     * Manejar edici√≥n si viene desde un callback (para poder volver al men√∫).
  3. **Implementar `configure_summary_callback`**

     * Registrar un √∫nico `CallbackQueryHandler` filtrando por `data.startswith("cfg|")`.
     * Extraer `campo` y `valor` de `callback_data`.
     * Validar permisos (solo admins o usuario en privado).
     * Si `valor == "open"`, desplegar submen√∫ correspondiente (editar mensaje).
     * Si `valor == "back|main"`, re-invocar `configure_summary_command` para regresar.
     * Si `valor` es un valor v√°lido de opci√≥n, invocar `update_chat_summary_config`, enviar `answerCallbackQuery` y re-disparar `configure_summary_command` para refrescar el men√∫ principal.
     * Manejar errores de BD o edici√≥n de mensaje: capturar y loguear, enviar un toast de error.

## Fase 3: Scheduler Din√°mico de Res√∫menes Diarios

* **Objetivo**: Integrar APScheduler para que, al modificar `daily_summary_hour`, se creen o destruyan jobs que env√≠en res√∫menes diarios.
* **Tareas**:

  1. **Modificar `scheduler_service.start()`**

     * Al inicializar, leer todas las `chat_summary_config` con `daily_summary_hour <> 'off'` y agregar un job con id `daily_summary_<chat_id>` que ejecute `send_daily_summary_for(chat_id)` a la hora indicada.
  2. **Agregar Funci√≥n `send_daily_summary_for(chat_id)`**

     * En `daily_summary_service.py`, exponer un m√©todo que llama a `generate_daily_summary(chat_id)` y luego a `message_service.send_message(chat_id, resumen)`.
  3. **Hacer que el Callback de ‚ÄúHora‚Äù Reprograme el Job**

     * En `configure_summary_callback`, en el caso `campo == "daily_summary_hour"`, despu√©s de actualizar BD:

       * Si `valor == 'off'`: `scheduler_service.scheduler.remove_job(job_id)` (si existe).
       * Si `valor != 'off'`: crear o reemplazar (`replace_existing=True`) el job con `CronTrigger(hour=int(valor), minute=0, timezone="Europe/Madrid")`.
  4. **Probar en Staging**

     * Configurar varias horas diferentes, reiniciar el bot y verificar que, cuando llega la hora (o forzando triggers cortos), el bot env√≠a el resumen diario.
     * Probar que al seleccionar ‚Äúoff‚Äù el job se detiene inmediatamente.

## Fase 4: Integraci√≥n del Prompt Din√°mico en `/summarize`

* **Objetivo**: Modificar la l√≥gica de `/summarize` sin reply para usar `get_summary_prompt(...)`, en lugar de los prompts fijos de `chat_long` o `chat_short`.
* **Tareas**:

  1. **Crear `custom_chat_prompts.py`**

     * Definir funci√≥n `get_summary_prompt(tone, length, language, include_names)` que retorne el texto del prompt de sistema:

       * Construir un p√°rrafo en el idioma correspondiente (usar `LABELS` para frases comunes).
       * Asegurar que, si `language` no est√° en `['es','en','fr','pt']`, lanzar error controlado.
  2. **Modificar `summarize_command.py`**

     * En el caso ‚Äúsin reply‚Äù:

       1. Llamar a `get_chat_summary_config`.
       2. Llamar a `get_summary_prompt(...)`. Si arroja ‚Äúidioma no disponible‚Äù, responder al usuario y retornar.
       3. Seguir con recolecci√≥n de mensajes, formateo y env√≠o a `openai_service.get_summary(content, summary_type="chat_custom", language)`.

          * En `openai_service`, registrar `'chat_custom'` en el tipo `SummaryType`, con un mapeo interno a `get_summary_prompt`.
       4. Enviar el resultado con `send_long_message`.
  3. **PRUEBAS**

     * Test unitario para `get_summary_prompt`: verificar que, dadas combinaciones de par√°metros, se genere un prompt coherente (tono, longitud e idioma correctos).
     * Test de `/summarize` sin reply en un chat con configuraci√≥n no por defecto (p. ej., `language='en'`, `tone='ironic'`) y revisar la llamada a OpenAI (mocker) con el prompt generado.

## Fase 5: Eliminaci√≥n de Comandos Obsoletos y Actualizaci√≥n de Ayudas

* **Objetivo**: Remover `/toggle_summary_type` y `/toggle_daily_summary` de la base de c√≥digo y de la documentaci√≥n, y adaptar `/help` y `/start` para mencionar `/configurar_resumen`.
* **Tareas**:

  1. **Eliminar Archivos**

     * Borrar `bot/commands/toggle_summary_type_command.py` y `bot/commands/toggle_daily_summary_command.py`.
     * Quitar sus importaciones en `bot/commands/__init__.py` y `bot/bot.py`.
  2. **Actualizar `/help`**

     * En `help_command.py`, reemplazar la secci√≥n donde se listan `/toggle_daily_summary` y `/toggle_summary_type` por una descripci√≥n de `/configurar_resumen`.
     * Agregar aclaraci√≥n: ‚ÄúEl resumen diario se env√≠a seg√∫n el horario de Madrid (CET/CEST).‚Äù
     * Asegurar que el mensaje muestre ‚Äîy solamente‚Äî estos comandos en la lista: `/start`, `/summarize`, `/help`, `/configurar_resumen`.
  3. **Actualizar `/start`**

     * En `start_command.py`, a√±adir una l√≠nea: ‚ÄúPara personalizar los res√∫menes (tono, idioma, etc.), usa `/configurar_resumen`.‚Äù
  4. **Pruebas de Regresi√≥n**

     * Verificar que invocar `/toggle_summary_type` o `/toggle_daily_summary` genere una respuesta: ‚ÄúEste comando ya no existe. Usa /configurar\_resumen.‚Äù
     * Probar cada comando listado en `/help` genera la acci√≥n correcta.

## Fase 6: Testing End-to-End y QA

* **Objetivo**: Asegurar que todos los flujos descritos funcionan sin errores en un entorno de staging real.
* **Tareas**:

  1. **Pruebas Unitarias**

     * Cobertura del 80 % para:

       * M√©todos de BD (`get_chat_summary_config`, `update_chat_summary_config`).
       * Funci√≥n `get_summary_prompt`.
       * Callbacks del flujo `configure_summary_callback` (opciones v√°lidas y casos de permisos).
       * L√≥gica de reprogramaci√≥n en `scheduler_service`.
  2. **Pruebas de Integraci√≥n (Mockeando Telegram y OpenAI)**

     * Simular un chat de grupo, invocar `/configurar_resumen` ‚Üí pulsar cada bot√≥n ‚Üí verificar BD.
     * Simular uso de `/summarize` sin reply ‚Üí mockear llamada a OpenAI y revisar que el prompt pasa correctamente.
     * Simular `/summarize` con reply (audio, doc, etc.) para asegurar que no se aplica la configuraci√≥n.
  3. **Pruebas Manuales en Staging**

     * Grupo de prueba con dos administradores y dos usuarios normales.
     * Validar permisos: solo admins ven los botones de configuraci√≥n.
     * Validar scheduler: configurar varias horas, reiniciar bot, verificar env√≠os de resumen diario (o cambiar temporalmente el trigger a cada minuto para pruebas r√°pidas).
     * Validar mensajes de error: idioma no disponible, BD inaccesible.

## Fase 7: Monitoreo y Optimizaci√≥n Post-Despliegue

* **Objetivo**: Garantizar estabilidad al escalar y corregir errores de producci√≥n.
* **Tareas**:

  1. **Logs y M√©tricas**

     * Registrar cada cambio de configuraci√≥n con nivel INFO/DEBUG: ‚ÄúUsuario X cambi√≥ campo Y de A a B en chat Z‚Äù.
     * Registrar errores en callbacks o scheduler con nivel ERROR.
     * Monitorizar el n√∫mero de jobs en APScheduler y latencia media de edici√≥n de mensajes (ideal < 1 s).
  2. **Verificaci√≥n de Consistencia**

     * Pulir la l√≥gica de arranque del scheduler: eliminar jobs hu√©rfanos, recargar desde BD cada vez que el bot arranca.
     * Si detecta un chat donde el bot ya no est√° (p. ej., expulsado), capturar excepci√≥n en `send_daily_summary_for` y eliminar el job.
  3. **Iteraci√≥n sobre UX**

     * Recoger feedback de admins sobre claridad de men√∫s, textos e √≠conos.
     * Ajustar etiquetas o descripciones en `LABELS` si es necesario.
  4. **Preparar Fase 2 (Extensiones)**

     * Basado en uso real, planificar nuevas localizaciones de idiomas o refinamientos de prompts.

# Logical Dependency Chain

1. **Fundaci√≥n de Datos (chat\_summary\_config)**

   * Implementar y probar la creaci√≥n de la tabla y m√©todos de lectura/escritura en `database_service.py`.
   * Migrar valores antiguos (si aplicable).

2. **Constantes y Etiquetas Localizadas (`LABELS`)**

   * Definir `LABELS` en `constants.py` con soportes m√≠nimos (`es`, `en`).
   * Probar acceso antes de construir men√∫s.

3. **Comando `/configurar_resumen` (handler inicial)**

   * Registrar comando en `bot/bot.py`.
   * Implementar `configure_summary_command` que muestra men√∫ principal.

4. **Callback Handler (`configure_summary_callback`)**

   * Registrar un `CallbackQueryHandler` que detecte `cfg|...`.
   * Casos:

     1. `open` ‚Üí desplegar submen√∫.
     2. `campo|valor` ‚Üí actualizar BD, enviar toast, volver a men√∫ principal.
     3. `back|main` ‚Üí invocar de nuevo `configure_summary_command`.

5. **Submen√∫s Inline (Tono, Longitud, Idioma, Nombres, Hora)**

   * Para cada `campo|open`, implementar las vistas en `configure_summary_callback`.
   * Validar permisos en cada paso.

6. **Scheduler Din√°mico**

   * Modificar `scheduler_service.start()` para cargar jobs actuales desde BD.
   * En `configure_summary_callback`, despu√©s de `update_chat_summary_config`, reprogramar o eliminar job seg√∫n `daily_summary_hour`.

7. **Funci√≥n Din√°mica de Prompt (`get_summary_prompt`)**

   * Crear `bot/prompts/custom_chat_prompts.py` con la l√≥gica que, dados (`tone`,`length`,`language`,`include_names`), devuelva un prompt de sistema l√≥gicamente coherente.
   * Manejar casos de idioma no soportado.

8. **Integraci√≥n en `/summarize` Sin Reply**

   * Ajustar `summarize_command.py` de manera que:

     1. Obtenga configuraci√≥n con `get_chat_summary_config`.
     2. Obtenga prompt con `get_summary_prompt`.
     3. Llamar a `openai_service.get_summary(..., summary_type="chat_custom", language)`.
     4. Enviar resultado.

9. **Eliminaci√≥n de Comandos Obsoletos**

   * Remover f√≠sicamente `[toggle_summary_type, toggle_daily_summary]` y sus referencias en `/help` y en el registro de handlers.

10. **Pruebas Unitarias y de Integraci√≥n**

    * Testear:

      1. M√©todos de BD (`get_/update_chat_summary_config`).
      2. Callbacks de cada flujo (`open`, `valor`, `back`).
      3. Prompt din√°mico para cada combinaci√≥n de par√°metros.
      4. Scheduler (agregar/editar/eliminar jobs).
      5. `/summarize` sin reply: verificar llamada a OpenAI con prompt correcto.

11. **QA Manual en Staging**

    * Simular chats privados y de grupo, probar permisos, res√∫menes diarios, interacci√≥n b√°sica.

12. **Despliegue y Monitoreo**

    * Poner en producci√≥n, monitorear logs, corregir bugs puntuales, iterar sobre prompts/UX.

# Risks and Mitigations

1. **Escalabilidad del Scheduler**

   * **Riesgo**: Si hay cientos de chats con resumen diario, APScheduler puede agotar memoria o CPU.
   * **Mitigaci√≥n**:

     * En producci√≥n monitorizar cuidadosamente el n√∫mero de jobs.
     * Si crece demasiado, migrar a un esquema ‚Äújob maestro‚Äù que recorra la tabla cada minuto y env√≠e res√∫menes pendientes, en lugar de un job por chat.

2. **Fallos en `edit_message_text`**

   * **Riesgo**: Si el mensaje original de configuraci√≥n fue borrado o expir√≥, `edit_message_text` lanza `BadRequest`.
   * **Mitigaci√≥n**:

     * En cada callback, capturar excepciones de edici√≥n.
     * En caso de error, enviar un nuevo mensaje de configuraci√≥n en lugar de editar, para reenganchar al usuario.

3. **Permisos de Callback**

   * **Riesgo**: Un usuario malintencionado podr√≠a manipular manualmente `callback_data` para forzar cambios de configuraci√≥n.
   * **Mitigaci√≥n**:

     * En cada callback, verificar si `chat.type in ['group','supergroup']` y que `from_user` sea admin real usando `get_chat_member`.
     * En privado, permitir siempre.

4. **Prompt Din√°mico Incorrecto o Incompleto**

   * **Riesgo**: El prompt generado por `get_summary_prompt` podr√≠a no reflejar correctamente los par√°metros, provocando res√∫menes confusos o irrelevantes.
   * **Mitigaci√≥n**:

     * Definir plantillas patr√≥n clar√≠simas para cada combinaci√≥n de `tone` y `length`.
     * Incluir ejemplos en tests unitarios para validar que el prompt contenga keywords espec√≠ficas (‚Äúsarcasm‚Äù, ‚Äúconcise‚Äù, ‚Äúlong‚Äù, ‚Äúnombre de usuario‚Äù, etc.).
     * Revisar manualmente varios res√∫menes de prueba.

5. **Migraci√≥n de Datos Incompleta**

   * **Riesgo**: Si la migraci√≥n de `summary_type` y `daily_summary_enabled` a `chat_summary_config` falla, los chats hist√≥ricos perder√≠an su configuraci√≥n.
   * **Mitigaci√≥n**:

     * Incluir un script de migraci√≥n que verifique conteos antes y despu√©s.
     * Realizar pruebas en staging que validen que cada chat antiguo mantenga su configuraci√≥n equivalente.
     * Mantener temporalmente un fallback para leer de campos antiguos si la fila nueva no existe, solo durante la transici√≥n.

6. **Recursos de API de OpenRouter / OpenAI**

   * **Riesgo**: Altos vol√∫menes de llamadas a la API pueden generar latencia o bloqueo de cuotas.
   * **Mitigaci√≥n**:

     * Introducir un mecanismo de caching (por ejemplo, cachear res√∫menes de chat cuando no cambian los √∫ltimos mensajes).
     * Limitar la frecuencia de `/summarize` para usuarios gratuitos (ya implementado).
     * Monitorear el uso y, si es necesario, cambiar a un plan de mayor capacidad o a un modelo secundario de menor costo.

# Appendix

## A. SQL Schema

```sql
-- Tabla principal para configuraci√≥n de res√∫menes por chat
CREATE TABLE IF NOT EXISTS chat_summary_config (
  chat_id             INTEGER PRIMARY KEY,
  tone                TEXT    NOT NULL DEFAULT 'neutral',
  length              TEXT    NOT NULL DEFAULT 'medium',
  language            TEXT    NOT NULL DEFAULT 'es',
  include_names       BOOLEAN NOT NULL DEFAULT 1,
  daily_summary_hour  TEXT    NOT NULL DEFAULT 'off'
);

-- Script opcional de migraci√≥n de datos desde las tablas antiguas
INSERT INTO chat_summary_config(chat_id, tone, length, language, include_names, daily_summary_hour)
SELECT chat_id,
       'neutral',
       CASE summary_type WHEN 'short' THEN 'short' ELSE 'long' END,
       'es',
       1,
       CASE WHEN daily_summary_enabled = 1 THEN '03' ELSE 'off' END
FROM telegram_chat_state
WHERE summary_type IS NOT NULL OR daily_summary_enabled IS NOT NULL;
```

## B. Ejemplo de `LABELS` (fragmento)

```python
LABELS = {
  'es': {
    'title_main': "‚öôÔ∏è Configuraci√≥n actual de res√∫menes en este chat:",
    'tone_button': "üß† Tono",
    'buttons': {
      'tone': {
        'neutral': "Neutral üßæ",
        'informal': "Informal üôÇ",
        'sarcastic': "Sarc√°stico üòà",
        'ironic': "Ir√≥nico üôÉ",
        'absurd': "Absurdo ü§™"
      },
      'length': {
        'short': "Corto ‚úÇÔ∏è",
        'medium': "Medio üìè",
        'long': "Largo üìö"
      },
      'language': {
        'es': "Espa√±ol üá™üá∏",
        'en': "Ingl√©s üá¨üáß",
        'fr': "Franc√©s üá´üá∑",
        'pt': "Portugu√©s üáµüáπ"
      },
      'include_names': {
        'true': "S√≠ üßç",
        'false': "No üö´"
      },
      'daily_summary_hour': {
        '00': "00:00 ‚è∞",
        '03': "03:00 ‚è∞",
        '08': "08:00 ‚è∞",
        '12': "12:00 ‚è∞",
        '18': "18:00 ‚è∞",
        '21': "21:00 ‚è∞",
        'off': "Desactivado üö´"
      }
    },
    'confirm_tone': "‚úÖ Tono actualizado a:",
    'confirm_length': "‚úÖ Longitud actualizada a:",
    'confirm_language': "‚úÖ Idioma actualizado a:",
    'confirm_include_names': "‚úÖ Incluir nombres:",
    'confirm_daily_hour': "‚úÖ Resumen diario programado a las",
    'confirm_daily_off': "‚úÖ Resumen diario desactivado",
    'back_button': "‚Ü© Volver",
    'invalid_option': "‚ö†Ô∏è Opci√≥n inv√°lida.",
    'error_db': "‚ùå Error guardando la configuraci√≥n en BD."
  },
  'en': {
    'title_main': "‚öôÔ∏è Current summary settings for this chat:",
    'tone_button': "üß† Tone",
    'buttons': {
      'tone': {
        'neutral': "Neutral üßæ",
        'informal': "Informal üôÇ",
        'sarcastic': "Sarcastic üòà",
        'ironic': "Ironic üôÉ",
        'absurd': "Absurd ü§™"
      },
      'length': {
        'short': "Short ‚úÇÔ∏è",
        'medium': "Medium üìè",
        'long': "Long üìö"
      },
      'language': {
        'es': "Spanish üá™üá∏",
        'en': "English üá¨üáß",
        'fr': "French üá´üá∑",
        'pt': "Portuguese üáµüáπ"
      },
      'include_names': {
        'true': "Yes üßç",
        'false': "No üö´"
      },
      'daily_summary_hour': {
        '00': "00:00 ‚è∞",
        '03': "03:00 ‚è∞",
        '08': "08:00 ‚è∞",
        '12': "12:00 ‚è∞",
        '18': "18:00 ‚è∞",
        '21': "21:00 ‚è∞",
        'off': "Off üö´"
      }
    },
    'confirm_tone': "‚úÖ Tone updated to:",
    'confirm_length': "‚úÖ Length updated to:",
    'confirm_language': "‚úÖ Language updated to:",
    'confirm_include_names': "‚úÖ Include names:",
    'confirm_daily_hour': "‚úÖ Daily summary set at",
    'confirm_daily_off': "‚úÖ Daily summary disabled",
    'back_button': "‚Ü© Back",
    'invalid_option': "‚ö†Ô∏è Invalid option.",
    'error_db': "‚ùå Error saving configuration to DB."
  }
  # (Opcionalmente incorporar 'fr' y 'pt' en entregas posteriores)
}
```

## C. Ejemplo de Prompt Din√°mico

### Par√°metros

* `tone = 'sarcastic'`
* `length = 'medium'`
* `language = 'es'`
* `include_names = True`

### Prompt Resultante

```
Eres un asistente que resume conversaciones con un tono sarc√°stico y divertido.
Tu tarea es generar un resumen de longitud media (5‚Äì7 frases), manteniendo los nombres
de los participantes cuando sea posible. Mant√©n toda la respuesta en espa√±ol.
Menciona qui√©n dijo qu√©, destaca lo absurdo o gracioso y presenta los puntos clave
de forma clara pero ir√≥nica.
```

## D. Investigaci√≥n y Notas Adicionales

* **Zona Horaria**: APScheduler usa `pytz.timezone("Europe/Madrid")` para CET/CEST autom√°tico.
* **L√≠mites de Mensajes para Resumen de Chat**: Debe haber al menos 5 mensajes recientes; de lo contrario, devolver ‚ÄúNo hay suficientes mensajes para resumir‚Ä¶‚Äù.
* **Tama√±o M√°ximo de Archivo (20 MB)**: Se recuerda en handlers de multimedia, pero no afecta directamente a la configuraci√≥n.
* **Dependencias Cr√≠ticas**:

  * `python-telegram-bot`
  * `aiosqlite`
  * `openai` (para OpenRouter y Whisper)
  * `APScheduler`
  * `pytz`
  * `ffmpeg` (para audio/video, en configuraciones previas)

</PRD>
