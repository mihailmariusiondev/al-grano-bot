---
description:
globs:
alwaysApply: true
---
---
description: This rule defines the structure and organization of the al-grano-bot project, a Telegram bot implementation
globs: **/*
alwaysApply: true
---

## **Project Root Structure**

```
al-grano-bot/
├── bot/                    # Core bot implementation
│   ├── callbacks/         # Telegram callback handlers
│   ├── commands/          # Bot command implementations
│   ├── handlers/          # Message and event handlers
│   ├── prompts/           # AI prompt templates
│   ├── services/          # Business logic and integrations
│   └── utils/             # Utility functions and helpers
├── memory-bank/           # Bot memory and data storage
│   ├── conversations/     # User conversation history
│   ├── sessions/          # Active user sessions
│   ├── cache/             # Temporary data cache
│   └── logs/              # Bot operation logs
├── scripts/               # Utility and setup scripts
│   ├── setup/             # Installation and configuration scripts
│   ├── migration/         # Data migration utilities
│   ├── backup/            # Backup and restore scripts
│   └── monitoring/        # Health check and monitoring tools
├── tasks/                 # Task management files (Task Master)
│   ├── tasks.json         # Main task definitions
│   ├── individual/        # Individual task markdown files
│   └── reports/           # Task analysis and complexity reports
├── .cursor/               # Cursor IDE configuration
│   └── rules/             # Cursor rules for development guidance
├── main.py               # Application entry point and bot initialization
├── environment.yml       # Conda environment configuration
├── README.md            # Project documentation and setup guide
├── repomix.config.json  # Repository packaging configuration
├── .env.example          # Environment variables template
├── .gitignore           # Git ignore patterns
└── LICENSE              # Project license
```

## **Core Bot Directory (`bot/`) - Detailed Structure**

### **`bot/callbacks/`** - Telegram Callback Handlers
Handles inline keyboard interactions and button callbacks:
- `inline_keyboards.py` - Inline keyboard callback processors
- `button_handlers.py` - Button press event handlers
- `menu_callbacks.py` - Navigation menu callbacks
- `action_callbacks.py` - Action-specific callback handlers

### **`bot/commands/`** - Bot Command Implementations
Contains all bot slash commands (`/start`, `/help`, etc.):
- `start.py` - Welcome and initialization command
- `help.py` - Help and documentation command
- `settings.py` - User settings and preferences
- `admin.py` - Administrative commands
- `ai_commands.py` - AI-powered command handlers

### **`bot/handlers/`** - Message and Event Handlers
Processes different types of messages and events:
- `text_handler.py` - Text message processing
- `media_handler.py` - Image, audio, video handlers
- `document_handler.py` - File and document processing
- `error_handler.py` - Error handling and logging
- `middleware.py` - Request preprocessing middleware

### **`bot/prompts/`** - AI Prompt Templates
AI prompt configurations and templates:
- `system_prompts.py` - System-level AI prompts
- `conversation_prompts.py` - Conversation flow prompts
- `task_prompts.py` - Task-specific prompt templates
- `personality.py` - Bot personality and tone settings
- `context_builders.py` - Context construction utilities

### **`bot/services/`** - Business Logic and Integrations
Core business logic and external service integrations:
- `ai_service.py` - AI model integration and management
- `telegram_service.py` - Telegram API wrapper and utilities
- `database_service.py` - Database operations and queries
- `cache_service.py` - Caching layer implementation
- `notification_service.py` - Push notifications and alerts
- `analytics_service.py` - Usage analytics and metrics

### **`bot/utils/`** - Utility Functions and Helpers
Shared utilities and helper functions:
- `decorators.py` - Function decorators for common patterns
- `validators.py` - Input validation utilities
- `formatters.py` - Message and data formatting
- `constants.py` - Application constants and configurations
- `helpers.py` - General-purpose helper functions
- `security.py` - Security and authentication utilities

## **Memory Bank Directory (`memory-bank/`) - Detailed Structure**

### **Data Storage Organization**
- **`conversations/`** - Persistent conversation history per user
- **`sessions/`** - Active user session data and state
- **`cache/`** - Temporary data for performance optimization
- **`logs/`** - Structured logging for debugging and monitoring

### **Data Persistence Patterns**
- JSON files for lightweight data storage
- SQLite databases for structured queries
- File-based caching for media and documents
- Rotating logs with timestamp organization

## **Scripts Directory (`scripts/`) - Detailed Structure**

### **Setup and Configuration**
- **`setup/install.py`** - Automated installation script
- **`setup/configure.py`** - Environment configuration utility
- **`setup/dependencies.py`** - Dependency management

### **Maintenance and Operations**
- **`migration/data_migration.py`** - Data structure migrations
- **`backup/backup_manager.py`** - Automated backup system
- **`monitoring/health_check.py`** - System health monitoring

## **Task Management (`tasks/`) - Detailed Structure**

### **Task Master Integration**
- **`tasks.json`** - Main task definitions and metadata
- **`individual/`** - Generated markdown files for each task
- **`reports/`** - Complexity analysis and progress reports
- **Task hierarchy and dependency management**
- **Automated task breakdown and expansion**

## **Key Files and Their Purpose**

- **[main.py](mdc:main.py)** - Application entry point and bot initialization
- **[environment.yml](mdc:environment.yml)** - Conda environment with Python dependencies
- **[README.md](mdc:README.md)** - Project documentation and setup instructions
- **[repomix.config.json](mdc:repomix.config.json)** - Configuration for repository packaging

## **Development Guidelines**

### **Bot Module Organization**
- **Commands**: Place new bot commands in `bot/commands/`
- **Handlers**: Message and update handlers go in `bot/handlers/`
- **Callbacks**: Inline keyboard callbacks belong in `bot/callbacks/`
- **Services**: Business logic and API integrations in `bot/services/`
- **Prompts**: AI prompt templates in `bot/prompts/`
- **Utils**: Shared utilities and helpers in `bot/utils/`

### **File Naming Conventions**
- Use snake_case for Python files
- Group related functionality in modules
- Keep handlers, commands, and callbacks separate
- Use descriptive names that indicate functionality

### **Import Patterns**
```python
# ✅ DO: Import from bot modules
from bot.services.ai_service import AIService
from bot.utils.helpers import format_message
from bot.commands.start import start_command

# ✅ DO: Use relative imports within bot package
from ..services import database
from .helpers import validate_input
```

### **Memory and Data Storage**
- **`memory-bank/`** directory contains bot's persistent data
- Store user sessions, conversation history, and bot state here
- Implement proper data persistence strategies

### **Task Management Integration**
- **`tasks/`** directory follows Task Master conventions
- Use Task Master tools for project management
- Reference [dev_workflow.mdc](mdc:.cursor/rules/dev_workflow.mdc) for task management

### **Environment Setup**
- Use **[environment.yml](mdc:environment.yml)** for dependency management
- Conda environment ensures consistent Python setup
- Include all bot dependencies (telegram, AI libraries, etc.)

## **Common Development Patterns**

### **Bot Command Structure**
```python
# bot/commands/example.py
async def example_command(update, context):
    """Handle /example command"""
    # Command implementation
    pass
```

### **Service Integration**
```python
# bot/services/example_service.py
class ExampleService:
    """Service for handling specific bot functionality"""

    def __init__(self):
        # Service initialization
        pass

    async def process(self, data):
        # Service logic
        pass
```

### **Handler Registration**
```python
# Register handlers in main.py or dedicated setup
application.add_handler(CommandHandler("example", example_command))
application.add_handler(MessageHandler(filters.TEXT, message_handler))
```

## **Best Practices**

- **Modular Design**: Keep bot functionality separated by concern
- **Async/Await**: Use async patterns for Telegram bot operations
- **Error Handling**: Implement proper error handling in all handlers
- **Logging**: Use appropriate logging throughout the bot
- **Configuration**: Store sensitive data in environment variables
- **Testing**: Write tests for bot commands and services

## **Integration Points**

- **Telegram API**: Primary interface through python-telegram-bot
- **AI Services**: Integration through `bot/services/` modules
- **Data Persistence**: Through `memory-bank/` storage
- **Task Management**: Via Task Master in `tasks/` directory








This structure supports a scalable, maintainable Telegram bot with clear separation of concerns and organized codebase navigation.